@layout BlazorArticleWeb.Components.Layout.ArticleLayout
@page "/post/{ArticleName}"
@using BlazorArticle.Components
@*To see better prerendered results (in site source) in static side rendering set this to "false" - you don't see loading indicator without InteractiveServer rendering mode
  Starting with .NET 10, the Persistent State mechanism will be more accessible and easier to use.
*@
@attribute [StreamRendering(true)] 

@*Interactive rendering causes the problem with rendering dynamic component in a place of marker, if the marker is surrounded by html tags
see reported issue: https://github.com/dotnet/aspnetcore/issues/61760
.*@
@* @rendermode InteractiveServer *@

@implements IDisposable

@inject ArticleProviderSite ArticleProvider

<PageTitle>
    @if(_isArticleLoaded)
    {
        @("Article loaded")
    }
</PageTitle>

@if(!_isArticleLoaded)
{
    <div class="d-flex flex-column justify-content-center align-items-center" style="height:100%">
        <img src="/img/spin_loading.gif" alt="loading article" />
    </div>
}
else
{
    @*Renders css style in the head - with StreamRendering set to false you can set "UseJavascript" to false and use by default pre-rendered style. *@
    <ArticleStyleContent Style="@_articleStyle.Content"  UseJavascript="true" IsCompressed="true"/>

    if(_article is not null)
    {
        <div class="page">
            <article>
                <ArticleRenderer IContent="@_article" RemoveComments="true" />
            </article>
        </div>
    }
    else
    {
        <div class="d-flex flex-column justify-content-center align-items-center" style="height:100%">
            <div class="alert alert-warning" role="alert">
                There's no article of ID: @ArticleName
            </div>
        </div>
    }


}

 <SectionContent SectionName="sidebar-article">
    @if(_isArticleLoaded)
    {
        <!-- sticky header is hardcoded as 50px height -->
        <div class="sticky-top" style="top:50px;">
            @*This component is part of a website template for a fully customizable table of contents. Some solution of rendering TOC may become part of the BlazorArticle library in the future*@
            <TableOfContent @rendermode="InteractiveServer" ArticleId="_article.Id" /> 
        </div>

    }
</SectionContent> 




@code {
    //[Inject]
    //public ArticleLoader ArticleLoader { get; set; }

    [Parameter]
    public string ArticleName{ get; set; }


    ModelArticle _article;
    ModelArticleStyle _articleStyle;

    bool _isArticleLoaded = false;


    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1200);
        _article = await ArticleProvider.GetArticleByNameAsync(ArticleName);
        //
        _articleStyle = await ArticleProvider.GetStyleAsync(_article._StyleId.Value);
        //
        _isArticleLoaded = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        
    }

    public void Dispose()
    {
        int x = 10;
    }


}
